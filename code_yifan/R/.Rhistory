summarise(count1 = n())
x2 <- review2 %>%
inner_join(s2, by = "word") %>%
group_by(line) %>%
summarise(count2 = n())
x3 <- review2 %>%
inner_join(s3, by = "word") %>%
group_by(line) %>%
summarise(count3 = n())
x4 <- review2 %>%
inner_join(s4, by = "word") %>%
group_by(line) %>%
summarise(count4 = n())
x5 <- review2 %>%
inner_join(s5, by = "word") %>%
group_by(line) %>%
summarise(count5 = n())
review3 <- review1 %>%
full_join(x1, by = "line") %>%
full_join(x2, by = "line") %>%
full_join(x3, by = "line") %>%
full_join(x4, by = "line") %>%
full_join(x5, by = "line")
review3
review3$count1[which(is.na(review3$count1))] = 0
review3$count2[which(is.na(review3$count2))] = 0
review3$count3[which(is.na(review3$count3))] = 0
review3$count4[which(is.na(review3$count4))] = 0
review3$count5[which(is.na(review3$count5))] = 0
new = review3
new
new
new = data.frame(new)
colnames(new) = c('s1','s2','s3','s4','s5')
review$date = apply(as.data.frame(review$date),1,FUN=year)
id1 = which(review$longitude< -100)
id2 = which(review$longitude> -100 & review$longitude< -25)
id3 = which(review$longitude> -25)
loc = rep(0,nrow(review))
loc1 = loc
loc1[id1] = 1
loc2 = loc
loc2[id2] = 1
loc3 = loc
loc3[id3] = 1
review = review %>% mutate(loc1=loc1,loc2=loc2,loc3=loc3)
write_csv(review,'train_final.csv')
library(tidyverse)
library(tidytext)
library(lubridate)
words = read_csv('feature4jianmin_all.csv')
n=2000
s1=tibble(word = words$word[order(words$V1,decreasing = TRUE)][1:n])
s2=tibble(word = words$word[order(words$V2,decreasing = TRUE)][1:n])
s3=tibble(word = words$word[order(words$V3,decreasing = TRUE)][1:n])
s4=tibble(word = words$word[order(words$V4,decreasing = TRUE)][1:n])
s5=tibble(word = words$word[order(words$V5,decreasing = TRUE)][1:n])
date = read_csv('train_en2.csv')
# index = sample(nrow(date),100000,replace=FALSE)
index = c(1:nrow(date))
review = date[index,]
review1 <- date[index,] %>%
select(text) %>%
mutate(line = index)
review11 = review1[1:500000,]
t1 = Sys.time()
review21  <- review11 %>%
unnest_tokens(word, text)
t2 = Sys.time()
t2-t1
review12 = review1[500001:1000001,]
review22  <- review12 %>%
unnest_tokens(word, text)
review13 = review1[1000001:nrow(review1),]
review23  <- review13 %>%
unnest_tokens(word, text)
review2 = bind_rows(review21, review22, review23)
x1 <- review2 %>%
inner_join(s1, by = "word") %>%
group_by(line) %>%
summarise(count1 = n())
x2 <- review2 %>%
inner_join(s2, by = "word") %>%
group_by(line) %>%
summarise(count2 = n())
x3 <- review2 %>%
inner_join(s3, by = "word") %>%
group_by(line) %>%
summarise(count3 = n())
x4 <- review2 %>%
inner_join(s4, by = "word") %>%
group_by(line) %>%
summarise(count4 = n())
x5 <- review2 %>%
inner_join(s5, by = "word") %>%
group_by(line) %>%
summarise(count5 = n())
review3 <- review1 %>%
full_join(x1, by = "line") %>%
full_join(x2, by = "line") %>%
full_join(x3, by = "line") %>%
full_join(x4, by = "line") %>%
full_join(x5, by = "line")
review3$count1[which(is.na(review3$count1))] = 0
review3$count2[which(is.na(review3$count2))] = 0
review3$count3[which(is.na(review3$count3))] = 0
review3$count4[which(is.na(review3$count4))] = 0
review3$count5[which(is.na(review3$count5))] = 0
new = review3
######
new = data.frame(new)
colnames(new) = c('s1','s2','s3','s4','s5')
review = read_csv('train_final.csv')
review2 = cbind(review,new)
write_csv(review2,'train_final2.csv')
dim(review2)
review2[1,]
review2[,1]
review2[,2]
review2[,3]
review2[1:5,4]
review2[1:5,5]
review2[1:5,6]
review2[1:5,7]
review2[1:5,8]
review2[1:5,9]
review2[1:5,10]
review2[1:5,11]
review2[1:5,12]
review2[1:5,13]
review2[1:5,14]
review2[1:5,15]
review2[1:5,16]
review2[1:5,17]
review2[1:5,18]
review2[1:5,19]
review2[1:7,14]
dim(new)
new[1:5,]
new[1,]
review3[1]
review3[1,]
new <- review3 %>%
select(count1:count5)
new[1.]
new[1,]
new = data.frame(new)
colnames(new) = c('s1','s2','s3','s4','s5')
review2 = cbind(review,new)
dim(review2)
write_csv(review2,'train_final2.csv')
review$date = apply(as.data.frame(review$date),1,FUN=year)
date = read_csv('test.csv')
# index = sample(nrow(date),100000,replace=FALSE)
index = c(1:nrow(date))
review = date[index,]
review1 <- date[index,] %>%
select(text) %>%
mutate(line = index)
review11 = review1[1:500000,]
t1 = Sys.time()
review21  <- review11 %>%
unnest_tokens(word, text)
t2 = Sys.time()
t2-t1
review12 = review1[500001:1000001,]
review22  <- review12 %>%
unnest_tokens(word, text)
review13 = review1[1000001:nrow(review1),]
review23  <- review13 %>%
unnest_tokens(word, text)
review2 = bind_rows(review21, review22, review23)
x1 <- review2 %>%
inner_join(s1, by = "word") %>%
group_by(line) %>%
summarise(count1 = n())
x2 <- review2 %>%
inner_join(s2, by = "word") %>%
group_by(line) %>%
summarise(count2 = n())
x3 <- review2 %>%
inner_join(s3, by = "word") %>%
group_by(line) %>%
summarise(count3 = n())
x4 <- review2 %>%
inner_join(s4, by = "word") %>%
group_by(line) %>%
summarise(count4 = n())
x5 <- review2 %>%
inner_join(s5, by = "word") %>%
group_by(line) %>%
summarise(count5 = n())
review3 <- review1 %>%
full_join(x1, by = "line") %>%
full_join(x2, by = "line") %>%
full_join(x3, by = "line") %>%
full_join(x4, by = "line") %>%
full_join(x5, by = "line")
review3$count1[which(is.na(review3$count1))] = 0
review3$count2[which(is.na(review3$count2))] = 0
review3$count3[which(is.na(review3$count3))] = 0
review3$count4[which(is.na(review3$count4))] = 0
review3$count5[which(is.na(review3$count5))] = 0
new <- review3 %>%
select(count1:count5)
######
new = data.frame(new)
colnames(new) = c('s1','s2','s3','s4','s5')
new[1,]
review = read_csv('test_final.csv')
new[2,]
new[3,]
review2 = cbind(review,new)
write_csv(review2,'test_final2.csv')
library(ggplot2)  # FYI you need v2.0
library(dplyr)    # yes, i could have not done this and just used 'subset' instead of 'filter'
library(ggalt)    # devtools::install_github("hrbrmstr/ggalt")
library(ggthemes) # theme_map and tableau colors
install.packages("ggalt")
install.packages("ggthemes")
library(ggalt)    # devtools::install_github("hrbrmstr/ggalt")
library(ggthemes) # theme_map and tableau colors
world <- map_data("world")
world <- world[world$region != "Antarctica",] # intercourse antarctica
dat <- read.csv("CLIWOC15.csv")        # having factors here by default isn't a bad thing
gg <- ggplot()
gg <- gg + geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4)
gg
dat <- read.csv("../../data/random100000.csv")        # having factors here by default isn't a bad thing
setwd("/Users/Lyf/Github/Stat_628_2/code_yifan/R")
dat <- read.csv("../../data/random100000.csv")
library(tidyverse)
dat <- read_csv("../../data/random100000.csv")
dat[1,]
dat2 <- dat %>%
filter(longitude, latitude) # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data
gg <- ggplot()
gg <- gg + geom_map(data=world, map=world,
aes(x=long, y=lat, map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4)
gg <- gg + geom_map(data=world, map=world,
aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4)
gg <- gg + geom_point(data=dat, aes(x=longitude, y=latitude), size=0.15, alpha=1/100)
gg
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude), size=0.15, alpha=1/100) +
ylim(25,80)
world <- map_data("world")
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude), size=0.15, alpha=1/100) +
ylim(25,80)
world$region
"United State" %in% world$region
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude), color = "red10",
size=0.15, alpha=1/100) +
ylim(25,80)
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude), color = "red",
size=0.15, alpha=1/100) +
ylim(25,80)
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"),
size=0.15, alpha=1/100) +
ylim(25,80)
library(tidyverse)
library(tidytext)
library(Matrix)
library(topicmodels)
library(glmnet)
data_ori = read_csv("/Users/Lyf/OneDrive/study/WISC/2017_spring/Stat_628/hw2/trash/train_en3.csv")
data_df = data_frame(line = 1:nrow(data_ori),
text = data_ori$text,
stars = data_ori$stars)
data_df1 = data_df[1:100000]
data_df1 = data_df[1:100000,]
data_tidy1 <- data_df1 %>%
unnest_tokens(word, text)
data_tidy11 <- data_tidy1 %>%
distinct(line, word, stars)
data_tidy = data_tidy11
data_tidy2 <- data_tidy %>%
group_by(stars, word) %>%
summarise(count = n())
data_tidy2
data_tidy2_5 <- data_tidy2 %>%
group_by(word) %>%
summarise(count2_5 = sum(count)) %>%
filter(count2_5 > 100)
major <- data_tidy2_5 %>%
select(word)
data_tidy3 <- data_tidy2 %>%
inner_join(major, by = "word") %>%
spread(stars, count, fill = 0)
data_tidy3
star_count <- data_df %>%
group_by(stars) %>%
summarise(count = n())
mycount = star_count$count
mycount
data_tidy3[which(data_tidy3$word == "notrefund"),]
myprop = function(data_row, counts){
data2 = as.numeric(data_row[2:6])
xx = numeric(5)
for(i in 1:5){
if(counts[i] == 0){
xx[i] = 0
}else if(sum(data2[-i]) == 0){
xx[i] = 100
}else if(sum(counts[-i]) == 0){
xx[i] = 100
}else{
y1 = data2[i]/counts[i]
y2 = sum(data2[-i])/sum(counts[-i])
xx[i] = y1/y2
}
}
return(xx)
}
t1 = Sys.time()
result = as.tibble(t(apply(data_tidy3, 1, myprop, counts = mycount)))
t2 = Sys.time()
t2-t1
result$word = data_tidy3$word
result <- result %>%
select(word, V1:V5)
result
result %>%
arrange(desc(V1))
data_tidy3[which(data_tidy3$word %in% c("refund", "rude"))]
data_tidy3[which(data_tidy3$word %in% c("refund", "rude")),]
data_tidy3[which(data_tidy3$word %in% c("refund", "rudely")),]
result %>%
arrange(desc(V5))
data_tidy3[which(data_tidy3$word %in% "notdisappoints",]
data_tidy3[which(data_tidy3$word == "notdisappoints",]
data_tidy3[which(data_tidy3$word %in% "notdisappoints"),]
mycount
sum(mycount)
dim(data_tidy)
star_count <- data_df %>%
group_by(stars) %>%
summarise(count = n())
mycount = star_count$count
mycount
sum(mycount)
star_count <- data_df1 %>%
group_by(stars) %>%
summarise(count = n())
mycount = star_count$count
sum(mycount)
myprop = function(data_row, counts){
data2 = as.numeric(data_row[2:6])
xx = numeric(5)
for(i in 1:5){
if(counts[i] == 0){
xx[i] = 0
}else if(sum(data2[-i]) == 0){
xx[i] = 100
}else if(sum(counts[-i]) == 0){
xx[i] = 100
}else{
y1 = data2[i]/counts[i]
y2 = sum(data2[-i])/sum(counts[-i])
xx[i] = y1/y2
}
}
return(xx)
}
t1 = Sys.time()
result = as.tibble(t(apply(data_tidy3, 1, myprop, counts = mycount)))
t2 = Sys.time()
t2-t1
result$word = data_tidy3$word
result <- result %>%
select(word, V1:V5)
result %>%
arrange(desc(V5))
data_tidy3[which(data_tidy3$word %in% "notdisappoints"),]
result %>%
arrange(desc(V1))
data_tidy3[which(data_tidy3$word %in% "refund"),]
mycount
data_tidy3[which(data_tidy3$word %in% "and"),]
data_tidy3[which(data_tidy3$word %in% "and"),]
result[which(result$word %in% "and"),]
data_tidy3[which(data_tidy3$word %in% "and"),]
data_tidy3[which(data_tidy3$word %in% "and"),]/mycount
c(data_tidy3[which(data_tidy3$word %in% "and"),])/mycount
as.vector(data_tidy3[which(data_tidy3$word %in% "and"),])/mycount
mycount
class(mycount)
as.vector(data_tidy3[which(data_tidy3$word %in% "and"),])
as.numeric(data_tidy3[which(data_tidy3$word %in% "and"),])/mycount
data_tidy3[which(data_tidy3$word %in% "and"),][2:6]/mycount
data_tidy3[which(data_tidy3$word %in% "notdisappoints"),][2:6]/mycount
data_tidy3[which(data_tidy3$word %in% "refund"),][2:6]/mycount
data_tidy3[which(data_tidy3$word %in% "notdisappoints"),]
usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), ,fill = "grey20", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group),fill = "grey20", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey20"), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey80"), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = "grey80"), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey80"),, fill = "grey80" color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey80"), fill = "grey80" color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey80"), fill = "grey80", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey20"), fill = "grey20", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey50"), fill = "grey50", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey50"), fill = "grey50", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"),
size=0.15, alpha=1/100)
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group, fill = "grey50"), fill = "grey50", color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"),
size=0.15, alpha=1/100) +
xlim(-150, -50)
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"), color = "red",
size=0.15, alpha=1/100) +
ylim(25,80)
dat2 <- dat %>%
filter(longitude, latitude) # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"), color = "red",
size=0.15, alpha=1/100) +
ylim(25,80)
gg
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"), color = "red",
size=1, alpha=1/100) +
ylim(25,60) +
xlim(-125, 25)
gg
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"), color = "red",
size=1, alpha=1/100) +
ylim(30,60) +
xlim(-125, 25)
gg
gg <- ggplot() +
geom_map(data=world, map=world, aes(map_id=region),
color="white", fill="#7f7f7f", size=0.05, alpha=1/4) +
geom_point(data=dat, aes(x=longitude, y=latitude, color = "red"), color = "red",
size=1, alpha=1/100) +
ylim(30,60) +
xlim(-125, 25) +
ggtitle("Distribution of reviews")
gg
